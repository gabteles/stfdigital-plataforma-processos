buildscript {
    ext {
        springBootVersion = '1.4.0.RC1'
        
        dependencyManagementPluginVersion = '0.6.0.RELEASE'
        gradleDockerPluginVersion = '0.8.0'
        gradleNodePluginVersion = '0.12'
        gradleGulpPluginVersion = '0.12'
        sonarqubeGradlePluginVersion = '2.0.1'
        
        springCloudReleaseTrainVersion = 'Brixton.SR3'
        apacheCommonsVersion = '3.3.2'
        jacksonVersion = '2.7.2'
        jacksonMapperVersion = '1.9.13'
        swaggerVersion = '1.0.2'
        guavaVersion = '19.0'
        flywayVersion = '4.0.3'
        jnaVersion = '4.1.0'
        jsonjVersion = '2.29'
        stfdigitalCoreVersion = '0.0.1-SNAPSHOT'
        stfdigitalTestVersion = '0.0.1-SNAPSHOT'
    }
    repositories {
        mavenLocal()
        mavenCentral()
        maven { url "http://repo.spring.io/release" }
        maven { url "https://plugins.gradle.org/m2/" }
        maven { url "https://repo.spring.io/libs-milestone" }
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
        classpath("io.spring.gradle:dependency-management-plugin:${dependencyManagementPluginVersion}")
        classpath("gradle.plugin.com.palantir.gradle.docker:gradle-docker:${gradleDockerPluginVersion}")
        classpath("com.moowork.gradle:gradle-node-plugin:${gradleNodePluginVersion}")
        classpath("com.moowork.gradle:gradle-gulp-plugin:${gradleGulpPluginVersion}")
        classpath("org.sonarsource.scanner.gradle:sonarqube-gradle-plugin:${sonarqubeGradlePluginVersion}")
    }
}

apply plugin: "io.spring.dependency-management"

apply plugin: 'spring-boot'

apply plugin: 'eclipse'

apply plugin: 'maven'

apply plugin: 'java'

apply plugin: "com.palantir.docker"

apply plugin: 'com.moowork.node'

apply plugin: 'com.moowork.gulp'

apply plugin: 'jacoco'

apply plugin: 'org.sonarqube'

repositories {
    mavenLocal()
    mavenCentral()
    maven { url "https://oss.sonatype.org/content/repositories/snapshots" }
    maven { url "https://repo.spring.io/libs-milestone" }
}

dependencyManagement {
    imports {
        mavenBom("org.springframework.cloud:spring-cloud-dependencies:${springCloudReleaseTrainVersion}")
        mavenBom("org.springframework.boot:spring-boot-dependencies:${springBootVersion}")
    }
}

dependencies {
    compile("org.springframework.boot:spring-boot-starter")
    
    compile("org.springframework.boot:spring-boot-starter-actuator")
        
    compile("org.springframework.boot:spring-boot-starter-web") {
        exclude module: 'spring-boot-starter-tomcat'
    }
    
    compile("org.springframework.boot:spring-boot-starter-undertow")
    
    compile("org.springframework.cloud:spring-cloud-starter-oauth2")
    
    compile("org.springframework.boot:spring-boot-starter-security")
    
    compile("org.springframework.cloud:spring-cloud-starter-feign")
    
    compile("org.springframework.boot:spring-boot-starter-data-jpa")

    compile("org.springframework.boot:spring-boot-starter-amqp")
                
    compile("org.springframework.boot:spring-boot-starter-data-elasticsearch")
    
    // Remover essa dependência quando o elasticsearch tiver com essa dependência como não opcional.
    // Monitorar issue https://github.com/elastic/elasticsearch/issues/13245
    // Parece que na próxima versão já vai estar como não opcional.
    compile("net.java.dev.jna:jna:${jnaVersion}")
    
    compile("org.springframework.cloud:spring-cloud-starter-eureka")
        
    compile("com.google.guava:guava:${guavaVersion}")
        
    compile("org.apache.commons:commons-lang3:${apacheCommonsVersion}")
        
    compile("com.fasterxml.jackson.core:jackson-core:${jacksonVersion}")
        
    compile("org.codehaus.jackson:jackson-mapper-asl:${jacksonMapperVersion}")
        
    compile("com.mangofactory:swagger-springmvc:${swaggerVersion}")
    
    compile("br.jus.stf.digital:core:${stfdigitalCoreVersion}")
    
    compile("com.h2database:h2")
    
    compile("org.flywaydb:flyway-core:$flywayVersion")
    
    testCompile("com.jayway.jsonpath:json-path")
    
    testCompile("com.jillesvangurp:jsonj:${jsonjVersion}")
    
    testCompile("org.springframework.boot:spring-boot-starter-test")
    
    testCompile("org.springframework.security:spring-security-test")
    
    testCompile("br.jus.stf.digital:test:${stfdigitalTestVersion}")
}

import org.gradle.plugins.ide.eclipse.model.SourceFolder 
eclipse.classpath.file {
    beforeMerged { classpath -> 
        classpath.entries.clear()
    }
    whenMerged {  cp -> 
        cp.entries.findAll { it instanceof SourceFolder && it.path.startsWith("src/main/") }*.output = "bin/main" 
        cp.entries.findAll { it instanceof SourceFolder && it.path.startsWith("src/test/") }*.output = "bin/test" 
        cp.entries.removeAll { it.kind == "output" }
    }
}

// Cobertura de testes
jacoco {
    toolVersion = '0.7.7.201606060606'
}

test {
	testLogging {
		showStandardStreams = true
	}
}

node {
  // Version of node to use.
  version = '5.9.1'

  // Base URL for fetching node distributions (change if you have a mirror).
  distBaseUrl = 'https://nodejs.org/dist'

  // If true, it will download node using above parameters.
  // If false, it will try to use globally installed node.
  download = true

  // Set the work directory for unpacking node
  workDir = file("${project.buildDir}/node")

  // Set the work directory where node_modules should be located
  nodeModulesDir = file("${project.projectDir}")
}

// --cache local para permitir executar npm install em paralelo
// Permitindo parametrizar o registro npm com o objetivo de poder usar um proxy local para melhorar o tempo de construção
npmInstall {
    args = ['--cache', 'node_cache']
    if (project.hasProperty('npmRegistry')) {
        args += ['--registry', project.getProperty('npmRegistry')]
    }
}

task gulpTestUnit(type: GulpTask) {
    args = ['test:unit:coverage']
}

task gulpPublishUnitCoverage(type: GulpTask) {
    args = ['publish-unit-coverage']
}

ext.e2eBaseUrl = project.hasProperty('e2eBaseUrl') ? project.getProperty('e2eBaseUrl') : 'https://docker:8443'
ext.e2eSeleniumAddress = project.hasProperty('e2eSeleniumAddress') ? project.getProperty('e2eSeleniumAddress') : 'http://docker:4444/wd/hub'

task gulpTestE2E(type: GulpTask) {
    args = ['test:e2e', '--e2eBaseUrl', e2eBaseUrl, '--e2eSeleniumAddress', e2eSeleniumAddress]
}

task gulpBuildDist(type: GulpTask) {
    args = ['build:dist']
}

npmInstall.dependsOn npm_prune
gulpBuildDist.dependsOn tasks.npmInstall
processResources.dependsOn tasks.gulpBuildDist

ext.dockerImageTag = project.hasProperty('dockerImageTag') ? project.getProperty('dockerImageTag') : ''

// Diretório do contexto Docker
ext.dockerDir = "${project.buildDir}" + '/docker'
// Caminho do arquivo Jar no contexto do Docker
ext.dockerAppJarFile = dockerDir + '/' + jar.baseName + '.jar'
// Essas bibliotecas estarão em uma layer adicional do Docker, de modo a otimizar seu mecanismo de cache
ext.additionalDockerLayerLibs = ['BOOT-INF/lib/core-' + ext.stfdigitalCoreVersion + '.jar']

// Extendendo a task dockerPrepare para explodir o Jar e permitir criar layers dockers para cada categoria de libs
dockerPrepare {
    doLast {
        // Layer Docker com as libs externas, atualizadas com menos frequência e por isso estarão em uma layer abaixo das outras
        copy {
            from(zipTree(file(dockerAppJarFile))) {
                include 'BOOT-INF/lib/**'
                include 'org/**'
                exclude additionalDockerLayerLibs
            }
            into dockerDir + '/app-lib-layer'
        }
        // Layer Docker adicional para as libs do stfdigital, são atualizadas com maior frequência que as libs externas
        copy {
            from(zipTree(file(dockerAppJarFile))) {
                include additionalDockerLayerLibs
            }
            into dockerDir + '/app-additional-layer'
        }
        // Layer Docker da aplicação em si, conterá um Jar pequeno, o que permite otimizar o pull da imagem do registro.
        copy {
            from(zipTree(file(dockerAppJarFile))) {
                exclude 'BOOT-INF/lib/**'
                exclude 'org/**'
            }
            into dockerDir + '/app-layer'
        }
        delete dockerAppJarFile
    }
}

docker {
    name dockerImageName + (dockerImageTag ? ':' + dockerImageTag : '')
    dockerfile 'src/main/docker/Dockerfile'
    files 'src/main/docker/docker-entrypoint.sh', 'truststores/truststore.jks'
    dependsOn tasks.jar, tasks.bootRepackage, tasks.build
}
